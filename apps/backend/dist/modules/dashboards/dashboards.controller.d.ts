import { DashboardsService } from './dashboards.service';
import { AuthenticatedUser } from '../auth/current-user.decorator';
export declare class DashboardsController {
    private readonly dashboardsService;
    constructor(dashboardsService: DashboardsService);
    getAdminDashboard(user: AuthenticatedUser, year?: string): Promise<{
        users: {
            name: string;
            points: number;
            badge: number;
            streakDay: number;
            totalPoints: number;
            badgeCount: number;
            awardPoints: number;
            password: string;
            previousPasswords: string[];
            passwordChangedAt?: Date;
            failedLoginAttempts: number;
            lockedUntil?: Date;
            lastPasswordResetRequest?: Date;
            passwordResetToken?: string | null;
            passwordResetExpires?: Date | null;
            passwordResetAttempts?: number;
            username?: string;
            firstName?: string;
            lastName?: string;
            avatar?: string;
            nisn?: string;
            roles: string[];
            classId?: import("mongoose").Types.ObjectId;
            isArchived?: boolean;
            deletedAt?: Date | null;
            lastLoginAt?: Date;
            profile: import("../../database/schemas/user.schema").UserProfile;
            preferences: import("../../database/schemas/user.schema").UserPreferences;
            _id: unknown;
            $locals: Record<string, unknown>;
            $op: "save" | "validate" | "remove" | null;
            $where: Record<string, unknown>;
            baseModelName?: string;
            collection: import("mongoose").Collection;
            db: import("mongoose").Connection;
            errors?: import("mongoose").Error.ValidationError;
            id?: any;
            isNew: boolean;
            schema: import("mongoose").Schema;
            __v: number;
        }[];
        quests: import("../quests/entities/quest.entity").Quest[];
        actionPresets: (import("mongoose").Document<unknown, {}, import("../../database/schemas/action-preset.schema").ActionPreset, {}, {}> & import("../../database/schemas/action-preset.schema").ActionPreset & {
            _id: import("mongoose").Types.ObjectId;
        } & {
            __v: number;
        })[];
        teacherReports: import("../teacher-reports/entities/teacher-report.entity").TeacherReport[];
        points: import("../points/entities/point-log.entity").PointLog[];
        classes: import("../../database/schemas/class.schema").Class[];
        appeals: import("../appeals/entities/appeal.entity").Appeal[];
        questParticipants: import("../quests/entities/quest-participant.entity").QuestParticipant[];
        auditLogs: import("../audit-logs/entities/audit-log.entity").AuditLog[];
    }>;
    getTeacherDashboard(user: AuthenticatedUser, year?: string): Promise<{
        students: {
            name: string;
            password: string;
            previousPasswords: string[];
            passwordChangedAt?: Date;
            failedLoginAttempts: number;
            lockedUntil?: Date;
            lastPasswordResetRequest?: Date;
            passwordResetToken?: string | null;
            passwordResetExpires?: Date | null;
            passwordResetAttempts?: number;
            username?: string;
            firstName?: string;
            lastName?: string;
            avatar?: string;
            nisn?: string;
            points?: number;
            roles: string[];
            classId?: import("mongoose").Types.ObjectId;
            isArchived?: boolean;
            deletedAt?: Date | null;
            lastLoginAt?: Date;
            profile: import("../../database/schemas/user.schema").UserProfile;
            preferences: import("../../database/schemas/user.schema").UserPreferences;
            _id: unknown;
            $locals: Record<string, unknown>;
            $op: "save" | "validate" | "remove" | null;
            $where: Record<string, unknown>;
            baseModelName?: string;
            collection: import("mongoose").Collection;
            db: import("mongoose").Connection;
            errors?: import("mongoose").Error.ValidationError;
            id?: any;
            isNew: boolean;
            schema: import("mongoose").Schema;
            __v: number;
        }[];
        users: {
            name: string;
            password: string;
            previousPasswords: string[];
            passwordChangedAt?: Date;
            failedLoginAttempts: number;
            lockedUntil?: Date;
            lastPasswordResetRequest?: Date;
            passwordResetToken?: string | null;
            passwordResetExpires?: Date | null;
            passwordResetAttempts?: number;
            username?: string;
            firstName?: string;
            lastName?: string;
            avatar?: string;
            nisn?: string;
            points?: number;
            roles: string[];
            classId?: import("mongoose").Types.ObjectId;
            isArchived?: boolean;
            deletedAt?: Date | null;
            lastLoginAt?: Date;
            profile: import("../../database/schemas/user.schema").UserProfile;
            preferences: import("../../database/schemas/user.schema").UserPreferences;
            _id: unknown;
            $locals: Record<string, unknown>;
            $op: "save" | "validate" | "remove" | null;
            $where: Record<string, unknown>;
            baseModelName?: string;
            collection: import("mongoose").Collection;
            db: import("mongoose").Connection;
            errors?: import("mongoose").Error.ValidationError;
            id?: any;
            isNew: boolean;
            schema: import("mongoose").Schema;
            __v: number;
        }[];
        classes: import("../../database/schemas/class.schema").Class[];
        teacherReports: import("../teacher-reports/entities/teacher-report.entity").TeacherReport[];
        points: import("../points/entities/point-log.entity").PointLog[];
        questParticipants: import("../quests/entities/quest-participant.entity").QuestParticipant[];
        quests: import("../quests/entities/quest.entity").Quest[];
        appeals: import("../appeals/entities/appeal.entity").Appeal[];
    }>;
    getStudentDashboard(user: AuthenticatedUser, year?: string): Promise<{
        points: import("../points/entities/point-log.entity").PointLog[];
        quests: import("../quests/entities/quest.entity").Quest[];
        questParticipants: import("../quests/entities/quest-participant.entity").QuestParticipant[];
        leaderboardUsers: {
            totalPoints: number;
            badgeCount: number;
            awardPoints: number;
            streak: number;
            password: string;
            previousPasswords: string[];
            passwordChangedAt?: Date;
            failedLoginAttempts: number;
            lockedUntil?: Date;
            lastPasswordResetRequest?: Date;
            passwordResetToken?: string | null;
            passwordResetExpires?: Date | null;
            passwordResetAttempts?: number;
            username?: string;
            firstName?: string;
            lastName?: string;
            avatar?: string;
            nisn?: string;
            points?: number;
            roles: string[];
            classId?: import("mongoose").Types.ObjectId;
            isArchived?: boolean;
            deletedAt?: Date | null;
            lastLoginAt?: Date;
            profile: import("../../database/schemas/user.schema").UserProfile;
            preferences: import("../../database/schemas/user.schema").UserPreferences;
            _id: unknown;
            $locals: Record<string, unknown>;
            $op: "save" | "validate" | "remove" | null;
            $where: Record<string, unknown>;
            baseModelName?: string;
            collection: import("mongoose").Collection;
            db: import("mongoose").Connection;
            errors?: import("mongoose").Error.ValidationError;
            id?: any;
            isNew: boolean;
            schema: import("mongoose").Schema;
            __v: number;
        }[];
        classLeaderboardUsers: {
            totalPoints: number;
            badgeCount: number;
            awardPoints: number;
            streak: number;
            password: string;
            previousPasswords: string[];
            passwordChangedAt?: Date;
            failedLoginAttempts: number;
            lockedUntil?: Date;
            lastPasswordResetRequest?: Date;
            passwordResetToken?: string | null;
            passwordResetExpires?: Date | null;
            passwordResetAttempts?: number;
            username?: string;
            firstName?: string;
            lastName?: string;
            avatar?: string;
            nisn?: string;
            points?: number;
            roles: string[];
            classId?: import("mongoose").Types.ObjectId;
            isArchived?: boolean;
            deletedAt?: Date | null;
            lastLoginAt?: Date;
            profile: import("../../database/schemas/user.schema").UserProfile;
            preferences: import("../../database/schemas/user.schema").UserPreferences;
            _id: unknown;
            $locals: Record<string, unknown>;
            $op: "save" | "validate" | "remove" | null;
            $where: Record<string, unknown>;
            baseModelName?: string;
            collection: import("mongoose").Collection;
            db: import("mongoose").Connection;
            errors?: import("mongoose").Error.ValidationError;
            id?: any;
            isNew: boolean;
            schema: import("mongoose").Schema;
            __v: number;
        }[];
        appeals: import("../appeals/entities/appeal.entity").Appeal[];
        teacherReports: import("../teacher-reports/entities/teacher-report.entity").TeacherReport[];
        userClass: any;
    }>;
    getParentDashboard(user: AuthenticatedUser, year?: string): Promise<{
        children: never[];
        points: import("../points/entities/point-log.entity").PointLog[];
        quests: import("../quests/entities/quest.entity").Quest[];
        questParticipants: never[];
        appeals: import("../appeals/entities/appeal.entity").Appeal[];
        teacherReports: import("../teacher-reports/entities/teacher-report.entity").TeacherReport[];
    }>;
}
//# sourceMappingURL=dashboards.controller.d.ts.map