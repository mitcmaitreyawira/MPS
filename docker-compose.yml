version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: mps-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD:-password}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE:-mps_db_unified}
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - mps-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand({ping: 1})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: mps-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redispassword}
    volumes:
      - redis_data:/data
    networks:
      - mps-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Backend API - Only starts with explicit profile
  backend:
    profiles: ["backend", "full"]
    build:
      context: .
      target: production
    container_name: mps-backend
    restart: unless-stopped
    ports:
      - "${PORT:-3002}:${PORT:-3002}"
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${PORT:-3002}
      API_PREFIX: ${API_PREFIX:-api/v1}
      MONGODB_URI: mongodb://${MONGO_INITDB_ROOT_USERNAME:-admin}:${MONGO_INITDB_ROOT_PASSWORD:-password}@mongodb:27017/${MONGO_INITDB_DATABASE:-mps_db_unified}?authSource=admin
      REDIS_HOST: redis
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redispassword}
      DEVLOCK: ${DEVLOCK:-false}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:5173}
      JWT_ACCESS_SECRET: ${JWT_ACCESS_SECRET:-production_access_secret_change_me}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-production_refresh_secret_change_me}
      UPLOAD_DEST: ${UPLOAD_DEST:-./uploads}
      JWT_ACCESS_EXPIRES_IN: ${JWT_ACCESS_EXPIRES_IN:-24h}
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS:-12}
      THROTTLE_TTL: ${THROTTLE_TTL:-60}
      THROTTLE_LIMIT: ${THROTTLE_LIMIT:-100}
      CACHE_TTL: ${CACHE_TTL:-300}
      ENABLE_SWAGGER: ${ENABLE_SWAGGER:-false}
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mps-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend Web App
  frontend:
    build:
      context: .
      target: frontend-production
    container_name: mps-frontend
    restart: unless-stopped
    ports:
      - "80:80"
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:3000/api/v1}
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - mps-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  mps-network:
    driver: bridge