name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'
    
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Lint code
      run: |
        pnpm run lint:backend
        pnpm run lint:frontend
    
    - name: Type check
      run: |
        pnpm run type-check:backend
        pnpm run type-check:frontend
    
    - name: Run backend tests
      run: pnpm run test:backend
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/test
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        JWT_ACCESS_SECRET: test-secret
        JWT_EXPIRES_IN: 1h
    
    - name: Run backend e2e tests
      run: pnpm run test:e2e:backend
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/test-e2e
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        JWT_ACCESS_SECRET: test-secret
        JWT_EXPIRES_IN: 1h
    
    - name: Run frontend tests
      run: pnpm run test:frontend
    
    - name: Build backend
      run: pnpm --filter @template/backend build
    
    - name: Build frontend
      run: pnpm run build:frontend
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./apps/backend/coverage/lcov.info,./apps/frontend/coverage/lcov.info
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'pnpm'
    
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Run security audit
      run: pnpm audit --audit-level moderate
    
    - name: Run dependency check
      run: |
        npx audit-ci --moderate
        npx better-npm-audit audit

  smoke:
    needs: [test, security]
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'pnpm'

    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Build backend
      run: pnpm --filter @template/backend build

    - name: Seed Mongo users (admin + teacher)
      env:
        SEED_ADMIN_EMAIL: ${{ secrets.SMOKE_ADMIN_EMAIL || 'admin@mps.com' }}
        SEED_ADMIN_PASSWORD_HASH: ${{ secrets.SMOKE_ADMIN_PASSWORD_HASH || '' }}
        SEED_TEACHER_EMAIL: ${{ secrets.SMOKE_TEACHER_EMAIL || 'test@mps.com' }}
        SEED_TEACHER_PASSWORD_HASH: ${{ secrets.SMOKE_TEACHER_PASSWORD_HASH || '' }}
      run: |
        node -e "const mongoose=require('./apps/backend/node_modules/mongoose');(async()=>{await mongoose.connect('mongodb://localhost:27017/mps_db');const User= mongoose.model('User', new mongoose.Schema({email:String,password:String,firstName:String,lastName:String,roles:[String],isActive:Boolean,isEmailVerified:Boolean},{collection:'users'}));const adminHash=process.env.SEED_ADMIN_PASSWORD_HASH||'$2b$12$naWHX/7UQ7cxeWJCnv0mE.kq7rVt.pXN4AR4CKOdub5otKzjVEq1O';const teacherHash=process.env.SEED_TEACHER_PASSWORD_HASH||'$2b$12$fS0g6SfZZdu1g5oT543Dr.GwypYiOSu47wQLR8uY7l33e/GT7f4Qi';await User.updateOne({email:process.env.SEED_ADMIN_EMAIL||'admin@mps.com'},{$set:{email:process.env.SEED_ADMIN_EMAIL||'admin@mps.com',password:adminHash,firstName:'System',lastName:'Administrator',roles:['admin'],isActive:true,isEmailVerified:true}},{upsert:true});await User.updateOne({email:process.env.SEED_TEACHER_EMAIL||'test@mps.com'},{$set:{email:process.env.SEED_TEACHER_EMAIL||'test@mps.com',password:teacherHash,firstName:'Test',lastName:'User',roles:['teacher'],isActive:true,isEmailVerified:true}},{upsert:true});await mongoose.disconnect();})().catch(e=>{console.error(e);process.exit(1);});"

    - name: Start backend server
      env:
        JWT_ACCESS_SECRET: ${{ secrets.JWT_ACCESS_SECRET || 'ci-secret' }}
        COOKIE_DOMAIN: localhost
        ENABLE_SWAGGER: false
      run: |
        nohup bash -c 'PORT=4000 NODE_ENV=production MONGODB_URI=mongodb://localhost:27017/mps_db REDIS_HOST=localhost REDIS_PORT=6379 JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET} COOKIE_DOMAIN=${COOKIE_DOMAIN} ENABLE_SWAGGER=${ENABLE_SWAGGER} pnpm --filter @template/backend start:prod' > backend.log 2>&1 &
        echo $! > backend.pid

    - name: Wait for API readiness
      run: |
        for i in {1..30}; do
          if curl -fsS http://localhost:4000/api/v1/health > /dev/null; then
            echo 'API is up'
            exit 0
          fi
          echo 'Waiting for API...'
          sleep 2
        done
        echo 'API failed to start in time'
        echo '--- Backend log (tail) ---'
        tail -n 200 backend.log || true
        exit 1

    - name: Run RBAC smoke tests
      env:
        BASE_URL: http://localhost:4000
        SMOKE_ADMIN_EMAIL: ${{ secrets.SMOKE_ADMIN_EMAIL || 'admin@mps.com' }}
        SMOKE_ADMIN_PASSWORD: ${{ secrets.SMOKE_ADMIN_PASSWORD || 'admin123' }}
        SMOKE_TEACHER_EMAIL: ${{ secrets.SMOKE_TEACHER_EMAIL || 'test@mps.com' }}
        SMOKE_TEACHER_PASSWORD: ${{ secrets.SMOKE_TEACHER_PASSWORD || 'test123' }}
      run: bash scripts/rbac-smoke.sh

    - name: Show backend logs on failure
      if: failure()
      run: |
        echo '--- Backend log (tail) ---'
        tail -n 200 backend.log || true

    - name: Upload backend logs artifact
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: backend-log
        path: backend.log

    - name: Stop backend
      if: always()
      run: |
        if [ -f backend.pid ]; then
          kill $(cat backend.pid) || true
        fi

  deploy-staging:
    needs: [test, security, smoke]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'pnpm'
    
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Build applications
      run: |
        pnpm run build:backend
        pnpm run build:frontend
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: rsync, docker build/push, kubectl apply, etc.
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on staging..."
        # Add smoke test commands here

  deploy-production:
    needs: [test, security, smoke]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'pnpm'
    
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Build applications
      run: |
        pnpm run build:backend
        pnpm run build:frontend
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: docker build/push, kubectl apply, terraform apply, etc.
    
    - name: Run production smoke tests
      run: |
        echo "Running smoke tests on production..."
        # Add production smoke test commands here
    
    - name: Notify deployment success
      run: |
        echo "Production deployment completed successfully!"
        # Add notification commands (Slack, email, etc.)